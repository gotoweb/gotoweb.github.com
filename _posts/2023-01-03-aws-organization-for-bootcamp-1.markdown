---
layout: post
title:  "부트캠프 운영을 위한 AWS Organization 관리 #1"
date:   2023-01-09 01:22:00 +0900
categories: AWS
---

## 요구사항

AWS를 가르치는 부트캠프에서, 수강생에게 다음이 제공되어야 합니다.

- AWS 계정을 제공
- 일정 분량의 AWS 크레딧

이러한 요구사항을 달성하기 위해 관리자는 다음을 고려해야 합니다.

- AWS 계정을 어떻게 제공해야 하는가?
- 과금을 어떻게 관리할 것인가?
- 활동을 어떻게 감사(audit)할 것인가?

## AWS 계정 제공

첫번째 이슈부터 살펴봅시다. 만일 인프라 내의 공통의 리소스에 접근 가능하고, 권한에 따라 통제를 하려면 IAM을 사용하는 것이 일반적이겠지만, 수강생 각자가 리소스를 생성/관리하게 하려는 목적이라면 고유의 학습 공간이 있어야 할 것입니다. 이는 조직 운영과 비슷합니다. 따라서 Organization을 사용하는 것이 적합합니다.

![](/assets/images/2023-01-19-aws-organization-udacity.png)

비슷한 사례로, Udacity에서 수강생에게 AWS 계정을 제공하는 사례를 보면, Udacity에 로그인 후 교육 운영 시스템 내에서 토큰을 URL에 심어 바로 AWS 콘솔에 접근할 수 있게 만들어 놓았습니다. 여기에는 Identity Federation 기능이 활용됩니다.

Identity Federation이란, 두 개의 서로 다른 시스템이 상호간의 신뢰를 바탕으로, 인증과 서비스 제공을 묶는 것을 의미합니다. 인증 시스템은 IdP(identity provider), 서비스 시스템은 SP(service provider)라고 부르죠. 여기에는 OAuth 2.0, SAML 2.0, OpenID과 같은 프로토콜을 사용할 수 있습니다. 만일 SP가 AWS 외에도 여러가지가 있다면 이러한 솔루션을 활용해야겠죠. 궁극적으로 부트캠프 운영에서 활용하게 되는 서비스는 AWS를 비롯해 GitHub, 자체 교육 운영 시스템 등이 있으므로, Federation 활용이 베스트라고 볼 수 있겠습니다. 

그러나 모든 시스템 통합이나 Single Sign-on을 구현할 수 있는 상황이 아니므로, 기본으로 제공되는 Organization을 활용해도 좋겠습니다.

Organization에는 사용자를 직접 추가하거나, 아니면 기존 사용자를 초대할 수 있습니다.

사용자를 직접 추가할 경우 약간의 불확실성이 있는데, 반드시 이전에 AWS 가입에 사용하지 않았던 이메일이어야만 합니다. 사실 당연한 말인데, 관리자의 입장에서 일괄 생성을 하기 위해 사용자 이메일로 계정 생성을 하게 될 경우, 기존 가입유무에 따라 생성에 실패할 수도 있다는 이야기가 됩니다. 그래서 “이미 생성한 계정을 조직에 초대”하는 보다 능동적인 액션을 수강생에게 요구하는 편이 낫다고 판단했습니다. 

## 서비스 제어 정책(SCP)과 FullAWSAccess 이슈

조직에 합류하는 즉시, 모든 과금의 주체는 Organization의 루트 계정이 됩니다. 따라서 서비스 제어 정책(SCP)이 매우 중요합니다. 어떤 권한을 부여하고, 어떤 권한을 통제할지 세밀하게 결정되어야 합니다. 이는 IAM 정책 생성과 동일한 방법으로 할 수 있으므로, IAM에 익숙하다면 쉽게 할 수 있습니다. 

부트캠프 운영에서는 사용하게 되는 리소스에만 허용 정책을 설정하는 편이 거부 정책을 세우는 편보다 훨씬 간단하기 때문에, 학습 상황에 따라 EC2, S3, RDS 등의 핵심 서비스에 대한 권한을 허용하는 형태로 정책(StudentPolicy)을 만들었습니다.

그런데, 여기에 함정이 하나 존재했습니다.

> *초대에 승낙하자마자, 모든 권한이 허용된다고? 아니 그럼 과금은?*


Organization에서는 OU에 계정이 추가되는 즉시 해당 계정은 FullAWSAccess 라는 기본 SCP가 연결됩니다. 이름으로 유추할 수 있듯, FullAWSAccess는 모든 종류의 권한에 대한 허용 정책입니다. 놀랍게도 이게 기본값입니다. “대체 왜 저게 기본값인가?”라는 의문이 들 수밖에 없습니다. 처음엔 앞서 만든 핵심 서비스 허용 정책(StudentPolicy)을 기본값으로 연결하려는 시도를 했지만 이는 불가능했습니다.

계정에 처음으로 연결되는 SCP를 바꿀 수도, FullAWSAccess를 수정하거나 삭제할 수도 없습니다. AWS 관리형 정책이라 그렇습니다.

결국 지나친 권한으로 인한 잠재적인 위험을 어떻게 방지할 수 있을지 고민한 끝에, 루트 OU에 거부 정책(DenyAllPolicy)을 명시적으로 연결해 놓고 준비가 되면 FullAWSAccess를 사용자들에게서 분리하고, StudentRole로 연결하는 방법을 사용했습니다. 이것이 작동하는 이유는, **거부 정책이 항상 허용 정책보다 우선**시되기 때문입니다.

해놓고도 이게 바른 방법이 맞나 이리저리 찾아본 결과, 관련 언급을 [awsdocs 문서](https://github.com/awsdocs/aws-organizations-docs/blob/main/doc_source/orgs_manage_policies_inheritance_auth.md)에서 찾아볼 수 있었습니다. allow list strategy, deny list strategy를 잘 활용하고, 어차피 처음부터 default SCP는 FullAWSAccess니까 알아서 잘 관리하라는 결론이었습니다(…)

어쨌든 한계를 알았고, 방법을 찾아낸 것은 다행이지만 결과적으로 조금 번거로운 과정이기는 합니다.

---

(과금 관리와 감사는 다음 편에서 계속…)
